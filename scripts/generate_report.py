"""
Generate model training report for CI/CD.
"""

import argparse
import mlflow
import pandas as pd
from datetime import datetime
from pathlib import Path

def generate_report(experiment_name: str, output_file: str) -> None:
    """Generate HTML report of training results."""
    
    try:
        # Get experiment runs
        experiment = mlflow.get_experiment_by_name(experiment_name)
        if experiment:
            runs = mlflow.search_runs(experiment_ids=[experiment.experiment_id])
        else:
            runs = pd.DataFrame()
        
        # Generate HTML report
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Model Training Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .header {{ background: #f8f9fa; padding: 20px; border-radius: 5px; }}
                .metrics {{ background: #e8f5e9; padding: 15px; border-radius: 5px; margin: 20px 0; }}
                table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ü§ñ MNIST Model Training Report</h1>
                <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p><strong>Experiment:</strong> {experiment_name}</p>
            </div>
            
            <div class="metrics">
                <h2>üìä Summary</h2>
                <ul>
                    <li><strong>Total Runs:</strong> {len(runs) if not runs.empty else 0}</li>
                    <li><strong>Best Accuracy:</strong> {runs['metrics.test_accuracy'].max():.2f}% if not runs.empty else 'N/A'}</li>
                    <li><strong>Latest Run:</strong> {runs['start_time'].max() if not runs.empty else 'N/A'}</li>
                </ul>
            </div>
            
            <h2>üîç Detailed Results</h2>
            {runs.to_html(classes='table', table_id='results') if not runs.empty else '<p>No runs found</p>'}
            
            <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd;">
                <p><em>Report generated by CI/CD pipeline</em></p>
            </footer>
        </body>
        </html>
        """
        
        Path(output_file).write_text(html_content)
        print(f"‚úÖ Report generated: {output_file}")
        
    except Exception as e:
        print(f"‚ùå Error generating report: {e}")

def main():
    parser = argparse.ArgumentParser(description="Generate training report")
    parser.add_argument("--experiment-name", required=True, help="MLflow experiment name")
    parser.add_argument("--output-file", default="report.html", help="Output HTML file")
    
    args = parser.parse_args()
    generate_report(args.experiment_name, args.output_file)

if __name__ == "__main__":
    main() 