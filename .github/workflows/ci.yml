name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install black isort ruff
        
    - name: Auto-format code with Black
      run: |
        black src/ --line-length 88 --target-version py39
        
    - name: Sort imports with isort
      run: |
        isort src/ --profile black
        
    - name: Lint with Ruff (warnings only)
      run: |
        ruff check src/ --select E,W --ignore E501,W503 || true
        
    - name: Show any formatting changes
      run: |
        git diff --name-only || true
        
  basic-tests:
    runs-on: ubuntu-latest
    name: Basic Functionality Tests
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install numpy matplotlib seaborn pandas
        
    - name: Create __init__.py files
      run: |
        touch src/__init__.py
        mkdir -p tests
        touch tests/__init__.py
        
    - name: Test imports
      run: |
        cd src
        python -c "
        from config import Params, get_config
        print('✅ Config import successful')
        
        from model import create_model, MNISTModel
        print('✅ Model import successful')
        "
        
    - name: Test basic functionality
      run: |
        cd src
        python -c "
        import torch
        from config import Params, get_config
        from model import create_model
        
        # Test configuration
        config = Params(batch_size=32, epochs=1, hidden_nodes=16)
        print(f'✅ Config created: batch_size={config.batch_size}')
        
        # Test model creation
        model = create_model('simple', hidden_nodes=16)
        param_count = sum(p.numel() for p in model.parameters())
        print(f'✅ Model created with {param_count} parameters')
        
        # Test forward pass
        test_input = torch.randn(2, 1, 28, 28)
        output = model(test_input)
        print(f'✅ Forward pass successful: {output.shape}')
        
        # Test different configs
        dev_config = get_config('dev')
        prod_config = get_config('prod')
        print(f'✅ Dev config: {dev_config.batch_size} batch size')
        print(f'✅ Prod config: {prod_config.batch_size} batch size')
        "

  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: basic-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install numpy matplotlib seaborn pandas scikit-learn
        
    - name: Test data pipeline (without download)
      run: |
        cd src
        python -c "
        import torch
        from torchvision import transforms
        from config import Params
        from dataset import get_mnist_transforms, MNISTDataModule
        
        # Test transforms
        transform = get_mnist_transforms()
        print('✅ Transform creation successful')
        
        # Test data module creation (without actual data loading)
        config = Params(batch_size=32, epochs=1)
        data_module = MNISTDataModule(config, data_dir='./test_data')
        print('✅ Data module creation successful')
        
        # Test that we can create the transform pipeline
        test_tensor = torch.randn(1, 28, 28)
        normalized = transform(test_tensor)
        print(f'✅ Transform pipeline works: {normalized.shape}')
        "
        
    - name: Test model training setup (dry run)
      run: |
        cd src
        python -c "
        import torch
        import torch.nn as nn
        import torch.optim as optim
        from config import Params, get_config
        from model import create_model
        
        # Test training setup without actual training
        config = Params(batch_size=4, epochs=1, lr=0.01, momentum=0.9)
        model = create_model('simple', hidden_nodes=16)
        
        # Test optimizer setup
        optimizer = optim.SGD(model.parameters(), lr=config.lr, momentum=config.momentum)
        criterion = nn.CrossEntropyLoss()
        
        # Test a forward/backward pass
        dummy_input = torch.randn(4, 1, 28, 28)
        dummy_target = torch.randint(0, 10, (4,))
        
        optimizer.zero_grad()
        output = model(dummy_input)
        loss = criterion(output, dummy_target)
        loss.backward()
        optimizer.step()
        
        print(f'✅ Training setup test passed - Loss: {loss.item():.4f}')
        
        # Test config environments
        dev_config = get_config('dev')
        prod_config = get_config('prod')
        print(f'✅ Environment configs work: dev={dev_config.epochs}, prod={prod_config.epochs}')
        " 